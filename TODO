Have OS specific sub-dirs for the modules
    Something like '$^O/ldap.pm', allowing new platforms to be supported
    by having sub directories named after how perl encodes your OS. They would all
    have the same API, so it's more or less drop in. You write foo/ldap.pm, which takes
    in and spits out the same variables/options/values as bar/ldap.pm, and the body of
    adjoin doesn't have to change. That would greatly simplify the existing code
    base as well, because I don't have to do any checking up on what the OS is outside
    of those modules. E.g. 'deduce_linux_enc_info' and 'deduce_solaris_enc_info' just
    becomes 'deduce_enc_info'. Something like the following:

    require "$^O/test.pm";
    'test'->import("test");

Look into kclient on solaris. I'm not certain how well it plays with AD though...

Combine all of the LDAP system calls into a better module
    Maybe have a function that sets up the ldap options based on the OS...
    Maybe have a function that does the call and returns the results, and what you pass it
    is the string of the stuff you care about? However I do it, I'm getting really tired
    of writing the same ldap code over and over again!

Split up file into more cohesive modules
    adjoin.pl is too big. Something about cramming every last function into the file
    bothers me, and I'd like them to be broken up into smaller modules based on
    functionality (one for dns queries, one for ip munging, etc.). I don't have a specific
    plan for how that should break down, but it is something I want.

Incorporate the 'dnssrv' option into dns queries
    '--dnssrv', and it's variable '$dnssrv', aren't used in /every/ DNS query. This seems wrong,
    and should probably be fixed so that every DNS query will look at '$dnssrv'. I don't know
    exactly how I want to do that at the moment...

Figure out what to do with '$site'.
    It's never used in adjoin.sh, so I'm not really
    certain what it's intended purpose was, but perhaps it was supposed to be used with the
    'getSite()' function. I assume I'll know more once I get down to that part of the file,
    but it's somewhat vexing to deal with.

Decide what things should count as error states, and how to handle them.
    There isn't a lot of thought put into what to do when various things fail, and that
    definitely needs to be taken into account.

vim: tw=90 et ts=4 sw=4
